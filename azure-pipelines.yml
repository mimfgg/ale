# Go
# Build your Go project.
# Add steps that test, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/go

trigger:
- master

pool:
  vmImage: 'Ubuntu-16.04'

variables:
  GOBIN:  '$(GOPATH)/bin' # Go binaries path
  GOROOT: '/usr/local/go1.11' # Go installation path
  GOPATH: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path
  LDFLAGS: -extldflags '-static' -X github.com/alde/ale/version.Version='$(Build.BuildNumber)' -X github.com/alde/ale/version.BuildDate=$(Build.BuildNumber)
  DOCKERTAG: 'alde/ale:$(Build.BuildNumber)'
  workspace: '$(system.defaultWorkingDirectory)/workspace'

steps:
- script: |
    mkdir -p '$(GOBIN)'
    mkdir -p '$(GOPATH)/pkg'
    mkdir -p '$(workspace)'
    shopt -s extglob
    shopt -s dotglob
    echo '##vso[task.prependpath]$(GOBIN)'
    echo '##vso[task.prependpath]$(GOROOT)/bin'
  displayName: 'Set up the Go workspace'

- script: |
    go version
    go get -u golang.org/x/lint/golint
    go get -u github.com/jstemmer/go-junit-report
    go get -u github.com/axw/gocov/gocov
    go get -u github.com/AlekSi/gocov-xml
    go get -u github.com/alde/gocov-html
  workingDirectory: '$(workspace)'
  displayName: 'Get dependencies'

- script: |
    go vet ./...
    golint -set_exit_status
  continueOnError: 'true'
  workingDirectory: '$(workspace)'
  displayName: 'vet and lint'

- script: |
    go test ./... -v -coverprofile=coverage.txt -covermode count 2>&1 | go-junit-report > junit.xml
    gocov convert coverage.txt > coverage.json
    gocov-xml < coverage.json > coverage.xml
    gocov-html < coverage.json > index.html
    mkdir reports
    cp junit.xml ./reports/junit.xml
    cp coverage.xml ./reports/coverage.xml
    cp index.html ./reports/index.html
  workingDirectory: '$(workspace)'
  displayName: 'Run unit tests'

- script: |
    go build -v -ldflags "$(LDFLAGS)" -o ale github.com/alde/ale/cmd/ale
  workingDirectory: '$(workspace)'
  displayName: 'build'

- script: |
    CGO_ENABLED=0 GOOS=linux go build -ldflags "$(LDFLAGS)" -a -installsuffix cgo -o ale github.com/alde/ale/cmd/ale
    docker build -t $(DOCKERTAG) .
  workingDirectory: '$(workspace)'
  displayName: 'build docker image'

- script: |
    docker login -u $(dockerId) -p $(dockerPassword)
    docker push $(DOCKERTAG)
  displayName: 'push docker image'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

- task: PublishTestResults@2
  inputs:
    testRunner: JUnit
    testResultsFiles: '$(workspace)/reports/junit.xml'

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: 'cobertura'
    summaryFileLocation: '$(workspace)/reports/coverage.xml'
    reportDirectory: '$(workspace)/reports/'
